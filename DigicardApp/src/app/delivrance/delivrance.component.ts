import { Component, OnInit } from '@angular/core';
import { NgForm } from "@angular/forms";
import { Delivrance } from 'src/app/shared/delivrance.model';
import { Router } from '@angular/router';
import { DelivranceService } from '../shared/delivrance.service';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-delivrance',
  templateUrl: './delivrance.component.html',
  styleUrls: ['./delivrance.component.css']
})
export class DelivranceComponent implements OnInit{
  showForm1 = false;
  showForm2 = false;

  toggleForm(form: string, event: Event) {
    const isChecked = (event.target as HTMLInputElement).checked;
    if (form === 'form1') {
      this.showForm1 = isChecked;
      if (isChecked) this.showForm2 = false;
    } else if (form === 'form2') {
      this.showForm2 = isChecked;
      if (isChecked) this.showForm1 = false;
    }
  }
  constructor(public service : DelivranceService, private toastr: ToastrService){}
  ngOnInit(): void {
    this.service.refreshList();
  }

  onSubmit(form: NgForm) {
    this.service.formSubmitted = true
    if (form.valid) {
      if (this.service.formData.id == 0)
        this.insertRecord(form)
      else
        this.updateRecord(form)
    }
    /*this.router.navigate(['/validation-card-request']);*/
  }
  insertRecord(form: NgForm) {
    this.service.postPaymentDetail()
      .subscribe({
        next: res => {
          this.service.list = res as Delivrance[]
          this.service.resetForm(form)
          this.toastr.success('Inserted successfully', 'Payment Detail Register')
        },
        error: err => { console.log(err) }
      })
  }
  updateRecord(form: NgForm) {
    this.service.putPaymentDetail()
      .subscribe({
        next: res => {
          this.service.list = res as Delivrance[]
          this.service.resetForm(form)
          this.toastr.info('Updated successfully', 'Payment Detail Register')
        },
        error: err => { console.log(err) }
      })
   }

   public csvData: any[] = [];
   public csvHeaders: string[] = [];
 
 
   onFileSelected(event: any): void {
     const file: File = event.target.files[0];
 
     if (file) {
       const reader = new FileReader();
       reader.onload = (e: any) => {
         const text = e.target.result;
         this.processCSV(text);
       };
       reader.readAsText(file);
     }
   }
 
   processCSV(csvContent: string): void {
     const lines = csvContent.split('\n');
     this.csvHeaders = lines[0].split(',');
 
     this.csvData = lines.slice(1).map(line => {
       const values = line.split(',');
       const row: any = {};
       this.csvHeaders.forEach((header, index) => {
         row[header] = values[index];
       });
       return row;
     });
   }
   uploadData() {
    const delivrances: Delivrance[] = this.csvData.map(row => ({
      id: 0,  // Assuming ID is auto-generated by the backend
      nom: row['Nom'] || '',
      prenom: row['Prenom'] || '',
      numDeCarte: +row['NumDeCarte'] || 0,
      numCin: +row['NumCin'] || 0,
      dateDeNaissance: new Date(row['DateDeNaissance']) || new Date(),
      gsm: +row['Gsm'] || 0,
      email: row['Email'] || ''
    }));

    this.service.addDelivrance(delivrances).subscribe(
      response => {
        console.log('Data uploaded successfully', response);
      },
      error => {
        console.error('Error uploading data', error);
        if (error.error && error.error.errors) {
          console.error('Validation errors:', error.error.errors);
        }
      }
    );
}
}
